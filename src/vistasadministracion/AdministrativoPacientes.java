/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistasadministracion;

import controlDatos.PacienteData;
import entidades.Paciente;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.table.DefaultTableModel;
import stuff.Utileria;
import vistas01.Escritorio0;
import vistasdieta.NuevaDietaVen;
import vistaspaciente.ModificarPaciente;

/**
 *
 * @author Equipo
 */
public class AdministrativoPacientes extends javax.swing.JInternalFrame {

    private int num;
    private Paciente pacEnv;
    private int click;
    private int filaS = -1;
    private int estado;
    private InternalFrameListener internalFrameListener;
    private PacienteData pd = new PacienteData();
    private DefaultTableModel modelo = new DefaultTableModel() {
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    /**
     * Creates new form ListaComidas
     */
    public AdministrativoPacientes(int num) {
        initComponents();
        if (num == 1) {
            this.num = num;
            jTpacientes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jBalta_baja.setSize(109, 32);
            jBalta_baja.setText("Seleccion paciente");
            jRbActivos.setSelected(true);
            jRbActivos.setVisible(false);
            estado = 2;
            jBver.setVisible(false);
            jBeliminar.setVisible(false);
            jRbInactivos.setVisible(false);
            jRbTodos.setVisible(false);
        } else if (num == 2) {
            detectorCerradoVentada();
            this.num = num;
            jTpacientes.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jBalta_baja.setText("Modificar");
            jRbActivos.setSelected(true);
            jRbActivos.setVisible(false);
            estado = 2;
            jBver.setVisible(false);
            jBeliminar.setVisible(false);
            jRbInactivos.setVisible(false);
            jRbTodos.setVisible(false);
        }
        this.click = 1;
        Utileria utileria = new Utileria(click);
        Cabecera();
        utileria.ordenamientoDeTabla(jTpacientes);
        cargarComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTingreso = new javax.swing.JTextField();
        jCbFiltrado = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jRbActivos = new javax.swing.JRadioButton();
        jRbTodos = new javax.swing.JRadioButton();
        jRbInactivos = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTpacientes = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jBalta_baja = new javax.swing.JButton();
        jBeliminar = new javax.swing.JButton();
        jBver = new javax.swing.JButton();
        jBcerrar = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(700, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTingreso.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTingresoKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 135;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 12, 0, 0);
        getContentPane().add(jTingreso, gridBagConstraints);

        jCbFiltrado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        jCbFiltrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbFiltradoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.ipadx = 106;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(27, 6, 0, 35);
        getContentPane().add(jCbFiltrado, gridBagConstraints);

        jLabel1.setText("Listado de los pacientes segun filtrado elegido");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 43, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        buttonGroup1.add(jRbActivos);
        jRbActivos.setText("Estados True (1y2)");
        jRbActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbActivosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 34, 0, 0);
        getContentPane().add(jRbActivos, gridBagConstraints);

        buttonGroup1.add(jRbTodos);
        jRbTodos.setText("Todos");
        jRbTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbTodosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 118, 0, 35);
        getContentPane().add(jRbTodos, gridBagConstraints);

        buttonGroup1.add(jRbInactivos);
        jRbInactivos.setText("Estado false(0)");
        jRbInactivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbInactivosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 6, 0, 0);
        getContentPane().add(jRbInactivos, gridBagConstraints);

        jTpacientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTpacientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTpacientesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTpacientes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 609;
        gridBagConstraints.ipady = 185;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 34, 0, 35);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jLabel2.setText("Seleccionar filtrado:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 31, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel3.setText("Ingrese que buscar:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 34, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jBalta_baja.setText("Alta/Baja");
        jBalta_baja.setEnabled(false);
        jBalta_baja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBalta_bajaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(68, 34, 30, 0);
        getContentPane().add(jBalta_baja, gridBagConstraints);

        jBeliminar.setText("Eliminar");
        jBeliminar.setEnabled(false);
        jBeliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBeliminarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(68, 2, 30, 0);
        getContentPane().add(jBeliminar, gridBagConstraints);

        jBver.setText("Ver");
        jBver.setEnabled(false);
        jBver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(68, 46, 30, 0);
        getContentPane().add(jBver, gridBagConstraints);

        jBcerrar.setText("Cerrar");
        jBcerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBcerrarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 16;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(68, 118, 30, 35);
        getContentPane().add(jBcerrar, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTingresoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTingresoKeyReleased
        // TODO add your handling code here:
        borrarFila();
        try {
            if (jCbFiltrado.getSelectedIndex() == 0) {
                Utileria.mensaje("Debe seleccionar una categoria para filtrar");
            } else {
                if (jRbActivos.isSelected() || jRbInactivos.isSelected() || jRbTodos.isSelected()) {
                    if (jRbActivos.isSelected()) {
                        this.estado = 2;
                    } else if (jRbInactivos.isSelected()) {
                        this.estado = 1;
                    } else {
                        this.estado = 0;
                    }
                    obtencionDeDatos();
                }
            }
        } catch (NumberFormatException e) {
            return;
        }

    }//GEN-LAST:event_jTingresoKeyReleased

    private void jRbActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbActivosActionPerformed
        // TODO add your handling code here:
        borrarFila();
        this.estado = 2;
        this.filaS = -1;
        Cabecera();
        obtencionDeDatos();

    }//GEN-LAST:event_jRbActivosActionPerformed

    private void jRbInactivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbInactivosActionPerformed
        // TODO add your handling code here:
        borrarFila();
        this.estado = 1;
        this.filaS = -1;
        Cabecera();
        obtencionDeDatos();

    }//GEN-LAST:event_jRbInactivosActionPerformed

    private void jRbTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbTodosActionPerformed
        // TODO add your handling code here:
        borrarFila();
        this.estado = 0;
        this.filaS = -1;
        Cabecera();
        obtencionDeDatos();

    }//GEN-LAST:event_jRbTodosActionPerformed

    private void jCbFiltradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbFiltradoActionPerformed
        // TODO add your handling code here:
        borrarFila();
        try {
            if (jRbActivos.isSelected() || jRbInactivos.isSelected() || jRbTodos.isSelected()) {
                if (jRbActivos.isSelected()) {
                    this.estado = 2;
                } else if (jRbInactivos.isSelected()) {
                    this.estado = 1;
                } else {
                    this.estado = 0;
                }
            }
            if (jCbFiltrado.getSelectedIndex() != 0 && num == 0 && !jRbActivos.isSelected() && !jRbInactivos.isSelected()) {
                jRbTodos.setSelected(true);
            }
            obtencionDeDatos();
            if (jCbFiltrado.getSelectedIndex() == 0 && num == 0) {
                buttonGroup1.clearSelection();
                jTingreso.setText("");
                borrarFila();
            }
        } catch (NumberFormatException e) {
            return;
        }

    }//GEN-LAST:event_jCbFiltradoActionPerformed

    private void jBalta_bajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBalta_bajaActionPerformed
        // TODO add your handling code here:
        int[] filasS = jTpacientes.getSelectedRows();
        if (jBalta_baja.getText().equals("Alta/Baja")) {
            if (filaS != -1) {
                for (Integer re : filasS) {
                    if (estado == 1 || jTpacientes.getValueAt(re, 4) == "false" || jTpacientes.getValueAt(re, 4) == "eliminado") {
                        pd.darAlta(Integer.valueOf(jTpacientes.getValueAt(re, 2).toString()));
                    } else if (jTpacientes.getValueAt(re, 4) == "true") {
                        pd.darBaja(Integer.valueOf(jTpacientes.getValueAt(re, 2).toString()));
                    }
                }
                borrarFila();
                obtencionDeDatos();
                filaS = -1;
            } else {
                Utileria.mensaje("Debe seleccionar una fila");
            }
        } else if (jBalta_baja.getText().equals("Modificar")) {
            if (filaS != -1) {
                int dni = pd.buscarPacienteDocumento(Integer.valueOf(jTpacientes.getValueAt(filaS, 2).toString())).getDni();
                ModificarPaciente ven = new ModificarPaciente(dni, 1);
                ven.addInternalFrameListener(internalFrameListener);
                Escritorio0.escritorio.add(ven);
                ven.toFront();
                ven.setVisible(true);
            } else {
                Utileria.mensaje("Debe seleccionar una fila");
            }
        } else {
            if (filaS != -1) {
                int dni = pd.buscarPacienteDocumento(Integer.valueOf(jTpacientes.getValueAt(filaS, 2).toString())).getDni();
                NuevaDietaVen.recibir(dni);
                this.dispose();
            } else {
                Utileria.mensaje("Debe seleccionar una fila");
            }
        }
    }//GEN-LAST:event_jBalta_bajaActionPerformed

    private void jBeliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBeliminarActionPerformed
        // TODO add your handling code here:
        int[] filasS = jTpacientes.getSelectedRows();
        if (filaS != -1) {
            for (Integer re : filasS) {
                pd.eliminarPaciAdmin(Integer.valueOf(jTpacientes.getValueAt(re, 2).toString()));
            }
            borrarFila();
            obtencionDeDatos();
            filaS = -1;
        } else {
            Utileria.mensaje("Debe seleccionar una fila");
        }
    }//GEN-LAST:event_jBeliminarActionPerformed

    private void jBverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBverActionPerformed
        // TODO add your handling code here:
        if (filaS != -1) {
            pacEnv = pd.buscarPacienteDocumento(Integer.valueOf(jTpacientes.getValueAt(filaS, 2).toString()));
            DatosPaciente dp = new DatosPaciente(pacEnv);
            getParent().add(dp);
            dp.setVisible(true);
        } else {
            Utileria.mensaje("Debe seleccionar una fila");
        }
    }//GEN-LAST:event_jBverActionPerformed

    private void jBcerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBcerrarActionPerformed
        // TODO add your handling code here:
        Object[] op = {"Aceptar", "Cancelar"};
        int i = JOptionPane.showOptionDialog(this, "Desea cerrar?", title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, frameIcon, op, "Aceptar");
        if (i == JOptionPane.YES_OPTION) {
            this.dispose();
        }
    }//GEN-LAST:event_jBcerrarActionPerformed

    private void jTpacientesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTpacientesMouseReleased
        // TODO add your handling code here:
        filaS = jTpacientes.getSelectedRow();
        if (estado != 1) {
            jBeliminar.setEnabled(true);
            jBver.setEnabled(true);
        }
        if (estado == 0) {
            if (jTpacientes.getValueAt(filaS, 4) == "true" || jTpacientes.getValueAt(filaS, 4) == "false") {
                jBalta_baja.setEnabled(true);
                jBeliminar.setEnabled(true);
            } else if (jTpacientes.getValueAt(filaS, 4) == "eliminado") {
                jBalta_baja.setEnabled(true);
                jBeliminar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_jTpacientesMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBalta_baja;
    private javax.swing.JButton jBcerrar;
    private javax.swing.JButton jBeliminar;
    private javax.swing.JButton jBver;
    private javax.swing.JComboBox<String> jCbFiltrado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRbActivos;
    private javax.swing.JRadioButton jRbInactivos;
    private javax.swing.JRadioButton jRbTodos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTingreso;
    private javax.swing.JTable jTpacientes;
    // End of variables declaration//GEN-END:variables

    private void cargarComboBox() {
        jCbFiltrado.addItem("nombre");
        jCbFiltrado.addItem("apellido");
        jCbFiltrado.addItem("dni");
    }

    private void borrarFila() {
        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    private void Cabecera() {
        modelo.setColumnCount(0);
        if (estado == 1 || (estado == 2 && num >= 1)) {
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido");
            modelo.addColumn("DNI");
            modelo.addColumn("Sexo");
            jTpacientes.setModel(modelo);
        } else {
            modelo.addColumn("Nombre");
            modelo.addColumn("Apellido");
            modelo.addColumn("DNI");
            modelo.addColumn("Sexo");
            modelo.addColumn("Estado");
            jTpacientes.setModel(modelo);
        }

    }

    private void obtencionDeDatos() {
        String estadoImp;
        jBalta_baja.setEnabled(false);
        jBeliminar.setEnabled(false);
        String seleccion = jCbFiltrado.getSelectedItem().toString();
        String ingreso = jTingreso.getText();
        ArrayList<Paciente> pacientes = new ArrayList<>();
        if (num >= 1) {
            pacientes = pd.ListaPacientes(seleccion, ingreso, estado);
        } else {
            pacientes = pd.AdminPacientes(seleccion, ingreso, (estado - 1));
        }
        if (!pacientes.isEmpty()) {
            for (Paciente recorrer : pacientes) {
                if (recorrer.getEstado() == 2) {
                    estadoImp = "true";
                } else if (recorrer.getEstado() == 1) {
                    estadoImp = "false";
                } else {
                    estadoImp = "eliminado";
                }
                if (estado == 1 || num >= 1) {
                    modelo.addRow(new Object[]{recorrer.getNombre(), recorrer.getApellido(), recorrer.getDni(), recorrer.getGenero()});
                } else {
                    modelo.addRow(new Object[]{recorrer.getNombre(), recorrer.getApellido(), recorrer.getDni(), recorrer.getGenero(), estadoImp});

                }

            }
            if (estado == 2) {
                jBalta_baja.setEnabled(true);
                jBeliminar.setEnabled(true);
            } else if (estado == 1) {
                jBalta_baja.setEnabled(true);
                jBeliminar.setEnabled(false);
            }
        }
    }

    private void detectorCerradoVentada() {
        internalFrameListener = new InternalFrameAdapter() {
            @Override
            public void internalFrameClosed(InternalFrameEvent e) {
                // This code will be executed when the second JInternalFrame is closed
                borrarFila();
                obtencionDeDatos();
                filaS = -1;
            }
        };
    }
}
